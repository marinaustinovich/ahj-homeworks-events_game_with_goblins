(()=>{"use strict";var t={};function e(t,e){const i=t<e,s=t>=e*(e-1),l=t%e==0,n=(t+1)%e==0;return i&&l?"top-left":i&&n?"top-right":s&&l?"bottom-left":s&&n?"bottom-right":i?"top":s?"bottom":l?"left":n?"right":"center"}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var i=t.g.document;if(!e&&i&&(i.currentScript&&(e=i.currentScript.src),!e)){var s=i.getElementsByTagName("script");s.length&&(e=s[s.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();class i{constructor(t){this.elemModal=null,this.eventShowModal=null,this.eventHideModal=null,this.hiding=!1,this.destroyed=!1,this.animationSpeed=200,this.options=t||{},this.createModal(),this.elemModal.addEventListener("click",this.handlerCloseModal.bind(this)),this.eventShowModal=new CustomEvent("show.modalFunc",{detail:this.elemModal}),this.eventHideModal=new CustomEvent("hide.modalFunc",{detail:this.elemModal})}createModal(){this.elemModal=document.createElement("div");let t,e="";if(this.elemModal.classList.add("modalFunc"),t='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="Закрыть">×</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",this.options.title||"Новое окно"),t=t.replace("{{content}}",this.options.content||""),this.options.footerButtons){for(const t of this.options.footerButtons){let i='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",t.class);i=i.replace("{{button_handler}}",t.handler),i=i.replace("{{button_text}}",t.text),e+=i}e='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",e)}t=t.replace("{{footer}}",e),this.elemModal.innerHTML=t,document.body.appendChild(this.elemModal)}show(){this.destroyed||this.hiding||(this.elemModal.classList.add("modal__show"),document.dispatchEvent(this.eventShowModal))}hide(){this.hiding=!0,this.elemModal.classList.remove("modal__show"),this.elemModal.classList.add("modal__hiding"),setTimeout((()=>{this.elemModal.classList.remove("modal__hiding"),this.hiding=!1}),this.animationSpeed),document.dispatchEvent(this.eventHideModal)}handlerCloseModal(t){("modalFunc"===t.target.dataset.dismiss||t.target.dataset.handler)&&this.hide()}destroy(){this.elemModal.parentElement&&this.elemModal.parentElement.removeChild(this.elemModal),this.elemModal.removeEventListener("click",this.handlerCloseModal.bind(this))}setContent(t){this.elemModal.querySelector('[data-modalFunc="content"]').innerHTML=t}setTitle(t){this.elemModal.querySelector('[data-modalFunc="title"]').innerHTML=t}}let s=null;function l(t){const e=function(t){const e=t**2;return Array.from({length:e/8},((t,e)=>8*e)).flatMap((t=>[t,t+1]))}(t);let i;do{i=Math.floor(Math.random()*e.length)}while(e[i]===s);return s=e[i],s}const n={pointer:"pointer",notallowed:"not-allowed",hammer:`url('${t.p+"img/hammer_small.png"}'), not-allowed`};class o{constructor(t){this.hitCount=0,this.missCount=0,this.container=t,this.initUI()}initUI(){if(!(this.container instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container.insertAdjacentHTML("afterbegin",`\n    <div class="click-counter">\n        <div>Hit counts: <span class="hit-count">${this.getHitCount()}</span></div>\n        <div>Miss counts: <span class="miss-count">${this.getMissCount()}</span></div>\n    </div>\n    `),this.hitCountEl=this.container.querySelector(".hit-count"),this.missCountEl=this.container.querySelector(".miss-count")}incrementHit(){this.hitCount+=1,this.updateUI()}incrementMiss(){this.missCount+=1,this.updateUI()}updateUI(){this.hitCountEl.textContent=this.getHitCount(),this.missCountEl.textContent=this.getMissCount()}getHitCount(){return this.hitCount}getMissCount(){return this.missCount}reset(){this.missCount=0,this.hitCount=0,this.updateUI()}}console.log("it works!");const a=new class{constructor(t){this.boardSize=t,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.isModal=!1,this.initModalListener()}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}initModalListener(){document.addEventListener("click",(t=>{"modalHandlerCancel"===t.target.dataset.handler&&this.currentModal&&(this.currentModal.hide(),this.isModal=!1)}))}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const i=document.createElement("div");i.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),i.addEventListener("mouseenter",(t=>this.onCellEnter(t))),i.addEventListener("mouseleave",(t=>this.onCellLeave(t))),i.addEventListener("click",(t=>this.onCellClick(t))),this.boardEl.appendChild(i)}this.cells=Array.from(this.boardEl.children)}redrawPositions(t){for(const t of this.cells)t.innerHTML="";const e=this.boardEl.children[t],i=document.createElement("div");i.classList.add("character","generic"),e.appendChild(i)}addCellEnterListener(t){this.cellEnterListeners.push(t)}addCellLeaveListener(t){this.cellLeaveListeners.push(t)}addCellClickListener(t){this.cellClickListeners.push(t)}onCellEnter(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellEnterListeners.forEach((t=>t.call(null,e)))}onCellLeave(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellLeaveListeners.forEach((t=>t.call(null,e)))}onCellClick(t){const e=this.cells.indexOf(t.currentTarget);this.cellClickListeners.forEach((t=>t.call(null,e)))}selectCell(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(t),this.cells[t].classList.add("selected",`selected-${e}`)}deselectCell(t){const e=this.cells[t];e.classList.remove(...Array.from(e.classList).filter((t=>t.startsWith("selected"))))}hideCellTooltip(t){this.cells[t].title=""}setCursor(t){this.boardEl.style.cursor=t}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}showModalMessage(t,e){this.isModal||(this.isModal=!0,this.showModal(t,e))}showModal(t,e){const s=new i({title:t,content:`&#${e}`,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]});this.currentModal=s,s.show()}}(4);a.bindToDOM(document.querySelector("#game-container"));const r=new class{constructor(t){this.gamePlay=t,this.indexSelect=null,this.clickCounter=null,this.onCellClick=this.onCellClick.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.onCellLeave=this.onCellLeave.bind(this)}init(){this.events(),this.gamePlay.drawUi("prairie"),this.clickCounter=new o(document.querySelector("#game-container")),this.showCharacter()}events(){this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick)}onCellClick(t){this.reactOnClick(t)}onCellEnter(t){this.gamePlay.setCursor(n.hammer),document.querySelector(".selected-generic")&&this.gamePlay.deselectCell(this.indexSelect),this.gamePlay.selectCell(t),this.indexSelect=t}onCellLeave(t){this.gamePlay.hideCellTooltip(t),this.gamePlay.setCursor(n.pointer)}showCharacter(){this.timerId=setInterval((()=>{const t=l(this.gamePlay.boardSize);this.gamePlay.redrawPositions(t)}),1e3),setTimeout((()=>this.resetTimer()),5e5)}resetTimer(){clearInterval(this.timerId)}reactOnClick(t){document.querySelectorAll(".cell")[t].querySelector(".generic")?(this.clickCounter.incrementHit(),this.clickCounter.getHitCount()>=10&&(this.gamePlay.showModalMessage(`You win! Your points are ${this.clickCounter.getHitCount()}`,"127881"),this.reset())):(this.clickCounter.incrementMiss(),this.clickCounter.getMissCount()>=5&&(this.gamePlay.showModalMessage("You lose!","129335"),this.reset()))}reset(){this.clickCounter.reset()}}(a);r.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b3RzdHJhcCIsIndlYnBhY2s6Ly9nYW1lX3dpdGhfZ29ibGlucy8uL3NyYy9qcy91dGlscy9jYWxjVGlsZVR5cGUuanMiLCJ3ZWJwYWNrOi8vZ2FtZV93aXRoX2dvYmxpbnMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9nYW1lX3dpdGhfZ29ibGlucy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9nYW1lX3dpdGhfZ29ibGlucy8uL3NyYy9qcy9jb21wb25lbnRzL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL2dhbWVfd2l0aF9nb2JsaW5zLy4vc3JjL2pzL3V0aWxzL2NyZWF0ZVBvc2l0aW9uLmpzIiwid2VicGFjazovL2dhbWVfd2l0aF9nb2JsaW5zLy4vc3JjL2pzL2N1cnNvcnMuanMiLCJ3ZWJwYWNrOi8vZ2FtZV93aXRoX2dvYmxpbnMvLi9zcmMvanMvY29tcG9uZW50cy9DbGlja0NvdW50ZXIvQ2xpY2tDb3VudGVyLmpzIiwid2VicGFjazovL2dhbWVfd2l0aF9nb2JsaW5zLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9nYW1lX3dpdGhfZ29ibGlucy8uL3NyYy9qcy9jb21wb25lbnRzL0dhbWVQbGF5L0dhbWVQbGF5LmpzIiwid2VicGFjazovL2dhbWVfd2l0aF9nb2JsaW5zLy4vc3JjL2pzL2NvbXBvbmVudHMvR2FtZUNvbnRyb2xsZXIvR2FtZUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGNUaWxlVHlwZShpbmRleCwgYm9hcmRTaXplKSB7XG4gIGNvbnN0IGlzVG9wUm93ID0gaW5kZXggPCBib2FyZFNpemU7XG4gIGNvbnN0IGlzQm90dG9tUm93ID0gaW5kZXggPj0gYm9hcmRTaXplICogKGJvYXJkU2l6ZSAtIDEpO1xuICBjb25zdCBpc0xlZnRDb2x1bW4gPSBpbmRleCAlIGJvYXJkU2l6ZSA9PT0gMDtcbiAgY29uc3QgaXNSaWdodENvbHVtbiA9IChpbmRleCArIDEpICUgYm9hcmRTaXplID09PSAwO1xuXG4gIGlmIChpc1RvcFJvdyAmJiBpc0xlZnRDb2x1bW4pIHJldHVybiAndG9wLWxlZnQnO1xuICBpZiAoaXNUb3BSb3cgJiYgaXNSaWdodENvbHVtbikgcmV0dXJuICd0b3AtcmlnaHQnO1xuICBpZiAoaXNCb3R0b21Sb3cgJiYgaXNMZWZ0Q29sdW1uKSByZXR1cm4gJ2JvdHRvbS1sZWZ0JztcbiAgaWYgKGlzQm90dG9tUm93ICYmIGlzUmlnaHRDb2x1bW4pIHJldHVybiAnYm90dG9tLXJpZ2h0JztcbiAgaWYgKGlzVG9wUm93KSByZXR1cm4gJ3RvcCc7XG4gIGlmIChpc0JvdHRvbVJvdykgcmV0dXJuICdib3R0b20nO1xuICBpZiAoaXNMZWZ0Q29sdW1uKSByZXR1cm4gJ2xlZnQnO1xuICBpZiAoaXNSaWdodENvbHVtbikgcmV0dXJuICdyaWdodCc7XG4gIHJldHVybiAnY2VudGVyJztcbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaW1wb3J0ICcuL21vZGFsLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuZWxlbU1vZGFsID0gbnVsbDtcbiAgICB0aGlzLmV2ZW50U2hvd01vZGFsID0gbnVsbDtcbiAgICB0aGlzLmV2ZW50SGlkZU1vZGFsID0gbnVsbDtcbiAgICB0aGlzLmhpZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5hbmltYXRpb25TcGVlZCA9IDIwMDtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLmNyZWF0ZU1vZGFsKCk7XG4gICAgdGhpcy5lbGVtTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZXJDbG9zZU1vZGFsLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5ldmVudFNob3dNb2RhbCA9IG5ldyBDdXN0b21FdmVudCgnc2hvdy5tb2RhbEZ1bmMnLCB7XG4gICAgICBkZXRhaWw6IHRoaXMuZWxlbU1vZGFsLFxuICAgIH0pO1xuICAgIHRoaXMuZXZlbnRIaWRlTW9kYWwgPSBuZXcgQ3VzdG9tRXZlbnQoJ2hpZGUubW9kYWxGdW5jJywge1xuICAgICAgZGV0YWlsOiB0aGlzLmVsZW1Nb2RhbCxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZU1vZGFsKCkge1xuICAgIHRoaXMuZWxlbU1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgbW9kYWxUZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwibW9kYWxfX2JhY2tkcm9wXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxGdW5jXCI+PGRpdiBjbGFzcz1cIm1vZGFsX19jb250ZW50XCI+PGRpdiBjbGFzcz1cIm1vZGFsX19oZWFkZXJcIj48ZGl2IGNsYXNzPVwibW9kYWxfX3RpdGxlXCIgZGF0YS1tb2RhbEZ1bmM9XCJ0aXRsZVwiPnt7dGl0bGV9fTwvZGl2PjxzcGFuIGNsYXNzPVwibW9kYWxfX2J0bi1jbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsRnVuY1wiIHRpdGxlPVwi0JfQsNC60YDRi9GC0YxcIj7Dlzwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwibW9kYWxfX2JvZHlcIiBkYXRhLW1vZGFsRnVuYz1cImNvbnRlbnRcIj57e2NvbnRlbnR9fTwvZGl2Pnt7Zm9vdGVyfX08L2Rpdj48L2Rpdj4nO1xuICAgIGNvbnN0IG1vZGFsRm9vdGVyVGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cIm1vZGFsX19mb290ZXJcIj57e2J1dHRvbnN9fTwvZGl2Pic7XG4gICAgY29uc3QgbW9kYWxCdXR0b25UZW1wbGF0ZSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInt7YnV0dG9uX2NsYXNzfX1cIiBkYXRhLWhhbmRsZXI9e3tidXR0b25faGFuZGxlcn19Pnt7YnV0dG9uX3RleHR9fTwvYnV0dG9uPic7XG4gICAgbGV0IG1vZGFsSFRNTDtcbiAgICBsZXQgbW9kYWxGb290ZXJIVE1MID0gJyc7XG5cbiAgICB0aGlzLmVsZW1Nb2RhbC5jbGFzc0xpc3QuYWRkKCdtb2RhbEZ1bmMnKTtcbiAgICBtb2RhbEhUTUwgPSBtb2RhbFRlbXBsYXRlLnJlcGxhY2UoXG4gICAgICAne3t0aXRsZX19JyxcbiAgICAgIHRoaXMub3B0aW9ucy50aXRsZSB8fCAn0J3QvtCy0L7QtSDQvtC60L3QvicsXG4gICAgKTtcbiAgICBtb2RhbEhUTUwgPSBtb2RhbEhUTUwucmVwbGFjZSgne3tjb250ZW50fX0nLCB0aGlzLm9wdGlvbnMuY29udGVudCB8fCAnJyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb290ZXJCdXR0b25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0aGlzLm9wdGlvbnMuZm9vdGVyQnV0dG9ucykge1xuICAgICAgICBsZXQgbW9kYWxGb290ZXJCdXR0b24gPSBtb2RhbEJ1dHRvblRlbXBsYXRlLnJlcGxhY2UoXG4gICAgICAgICAgJ3t7YnV0dG9uX2NsYXNzfX0nLFxuICAgICAgICAgIGJ1dHRvbi5jbGFzcyxcbiAgICAgICAgKTtcbiAgICAgICAgbW9kYWxGb290ZXJCdXR0b24gPSBtb2RhbEZvb3RlckJ1dHRvbi5yZXBsYWNlKFxuICAgICAgICAgICd7e2J1dHRvbl9oYW5kbGVyfX0nLFxuICAgICAgICAgIGJ1dHRvbi5oYW5kbGVyLFxuICAgICAgICApO1xuICAgICAgICBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsRm9vdGVyQnV0dG9uLnJlcGxhY2UoXG4gICAgICAgICAgJ3t7YnV0dG9uX3RleHR9fScsXG4gICAgICAgICAgYnV0dG9uLnRleHQsXG4gICAgICAgICk7XG4gICAgICAgIG1vZGFsRm9vdGVySFRNTCArPSBtb2RhbEZvb3RlckJ1dHRvbjtcbiAgICAgIH1cbiAgICAgIG1vZGFsRm9vdGVySFRNTCA9IG1vZGFsRm9vdGVyVGVtcGxhdGUucmVwbGFjZShcbiAgICAgICAgJ3t7YnV0dG9uc319JyxcbiAgICAgICAgbW9kYWxGb290ZXJIVE1MLFxuICAgICAgKTtcbiAgICB9XG4gICAgbW9kYWxIVE1MID0gbW9kYWxIVE1MLnJlcGxhY2UoJ3t7Zm9vdGVyfX0nLCBtb2RhbEZvb3RlckhUTUwpO1xuICAgIHRoaXMuZWxlbU1vZGFsLmlubmVySFRNTCA9IG1vZGFsSFRNTDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbU1vZGFsKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKCF0aGlzLmRlc3Ryb3llZCAmJiAhdGhpcy5oaWRpbmcpIHtcbiAgICAgIHRoaXMuZWxlbU1vZGFsLmNsYXNzTGlzdC5hZGQoJ21vZGFsX19zaG93Jyk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KHRoaXMuZXZlbnRTaG93TW9kYWwpO1xuICAgIH1cbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5oaWRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZWxlbU1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsX19zaG93Jyk7XG4gICAgdGhpcy5lbGVtTW9kYWwuY2xhc3NMaXN0LmFkZCgnbW9kYWxfX2hpZGluZycpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5lbGVtTW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWxfX2hpZGluZycpO1xuICAgICAgdGhpcy5oaWRpbmcgPSBmYWxzZTtcbiAgICB9LCB0aGlzLmFuaW1hdGlvblNwZWVkKTtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KHRoaXMuZXZlbnRIaWRlTW9kYWwpO1xuICB9XG5cbiAgaGFuZGxlckNsb3NlTW9kYWwoZSkge1xuICAgIGlmIChlLnRhcmdldC5kYXRhc2V0LmRpc21pc3MgPT09ICdtb2RhbEZ1bmMnIHx8IGUudGFyZ2V0LmRhdGFzZXQuaGFuZGxlcikge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5lbGVtTW9kYWwucGFyZW50RWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtTW9kYWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1Nb2RhbCk7XG4gICAgfVxuICAgIHRoaXMuZWxlbU1vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAnY2xpY2snLFxuICAgICAgdGhpcy5oYW5kbGVyQ2xvc2VNb2RhbC5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cblxuICBzZXRDb250ZW50KGh0bWwpIHtcbiAgICB0aGlzLmVsZW1Nb2RhbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2RhbEZ1bmM9XCJjb250ZW50XCJdJykuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxuXG4gIHNldFRpdGxlKHRleHQpIHtcbiAgICB0aGlzLmVsZW1Nb2RhbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2RhbEZ1bmM9XCJ0aXRsZVwiXScpLmlubmVySFRNTCA9IHRleHQ7XG4gIH1cbn1cbiIsImxldCBsYXN0UG9zaXRpb24gPSBudWxsO1xuXG5mdW5jdGlvbiBjcmVhdGVBcnJheVBvc2l0aW9ucyhib2FyZFNpemUpIHtcbiAgY29uc3QgdG90YWxDZWxscyA9IGJvYXJkU2l6ZSAqKiAyO1xuICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogdG90YWxDZWxscyAvIDggfSwgKF8sIGkpID0+IGkgKiA4KS5mbGF0TWFwKFxuICAgIChjZWxsKSA9PiBbY2VsbCwgY2VsbCArIDFdLFxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbihib2FyZFNpemUpIHtcbiAgY29uc3QgY2VsbHMgPSBjcmVhdGVBcnJheVBvc2l0aW9ucyhib2FyZFNpemUpO1xuICBsZXQgcmFuZDtcblxuICBkbyB7XG4gICAgcmFuZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNlbGxzLmxlbmd0aCk7XG4gIH0gd2hpbGUgKGNlbGxzW3JhbmRdID09PSBsYXN0UG9zaXRpb24pO1xuXG4gIGxhc3RQb3NpdGlvbiA9IGNlbGxzW3JhbmRdO1xuICByZXR1cm4gbGFzdFBvc2l0aW9uO1xufVxuIiwiaW1wb3J0IGhhbW1lckltZyBmcm9tICcuLi9pbWcvaGFtbWVyX3NtYWxsLnBuZyc7XG5cbmNvbnN0IGN1cnNvcnMgPSB7XG4gIHBvaW50ZXI6ICdwb2ludGVyJyxcbiAgbm90YWxsb3dlZDogJ25vdC1hbGxvd2VkJyxcbiAgaGFtbWVyOiBgdXJsKCcke2hhbW1lckltZ30nKSwgbm90LWFsbG93ZWRgLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY3Vyc29ycztcbiIsImltcG9ydCAnLi9jbGljay1jb3VudGVyLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWNrQ291bnRlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgIHRoaXMuaGl0Q291bnQgPSAwO1xuICAgIHRoaXMubWlzc0NvdW50ID0gMDtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgIHRoaXMuaW5pdFVJKCk7XG4gIH1cblxuICBpbml0VUkoKSB7XG4gICAgaWYgKCEodGhpcy5jb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY29udGFpbmVyIGlzIG5vdCBIVE1MRWxlbWVudCcpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICdhZnRlcmJlZ2luJyxcbiAgICAgIGBcbiAgICA8ZGl2IGNsYXNzPVwiY2xpY2stY291bnRlclwiPlxuICAgICAgICA8ZGl2PkhpdCBjb3VudHM6IDxzcGFuIGNsYXNzPVwiaGl0LWNvdW50XCI+JHt0aGlzLmdldEhpdENvdW50KCl9PC9zcGFuPjwvZGl2PlxuICAgICAgICA8ZGl2Pk1pc3MgY291bnRzOiA8c3BhbiBjbGFzcz1cIm1pc3MtY291bnRcIj4ke3RoaXMuZ2V0TWlzc0NvdW50KCl9PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGAsXG4gICAgKTtcbiAgICB0aGlzLmhpdENvdW50RWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuaGl0LWNvdW50Jyk7XG4gICAgdGhpcy5taXNzQ291bnRFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5taXNzLWNvdW50Jyk7XG4gIH1cblxuICBpbmNyZW1lbnRIaXQoKSB7XG4gICAgdGhpcy5oaXRDb3VudCArPSAxO1xuICAgIHRoaXMudXBkYXRlVUkoKTtcbiAgfVxuXG4gIGluY3JlbWVudE1pc3MoKSB7XG4gICAgdGhpcy5taXNzQ291bnQgKz0gMTtcbiAgICB0aGlzLnVwZGF0ZVVJKCk7XG4gIH1cblxuICB1cGRhdGVVSSgpIHtcbiAgICB0aGlzLmhpdENvdW50RWwudGV4dENvbnRlbnQgPSB0aGlzLmdldEhpdENvdW50KCk7XG4gICAgdGhpcy5taXNzQ291bnRFbC50ZXh0Q29udGVudCA9IHRoaXMuZ2V0TWlzc0NvdW50KCk7XG4gIH1cblxuICBnZXRIaXRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5oaXRDb3VudDtcbiAgfVxuXG4gIGdldE1pc3NDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5taXNzQ291bnQ7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1pc3NDb3VudCA9IDA7XG4gICAgdGhpcy5oaXRDb3VudCA9IDA7XG4gICAgdGhpcy51cGRhdGVVSSgpO1xuICB9XG59XG4iLCJpbXBvcnQgR2FtZVBsYXkgZnJvbSAnLi9jb21wb25lbnRzL0dhbWVQbGF5L0dhbWVQbGF5JztcbmltcG9ydCBHYW1lQ29udHJvbGxlciBmcm9tICcuL2NvbXBvbmVudHMvR2FtZUNvbnRyb2xsZXIvR2FtZUNvbnRyb2xsZXInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc29sZS5sb2coJ2l0IHdvcmtzIScpO1xuXG5jb25zdCBnYW1lUGxheSA9IG5ldyBHYW1lUGxheSg0KTtcbmdhbWVQbGF5LmJpbmRUb0RPTShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2FtZS1jb250YWluZXInKSk7XG5cbmNvbnN0IGdhbWVDdHJsID0gbmV3IEdhbWVDb250cm9sbGVyKGdhbWVQbGF5KTtcbmdhbWVDdHJsLmluaXQoKTsiLCJpbXBvcnQgY2FsY1RpbGVUeXBlIGZyb20gJy4uLy4uL3V0aWxzL2NhbGNUaWxlVHlwZSc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwvTW9kYWwnO1xuXG5pbXBvcnQgJy4vZ2FtZS1wbGF5LmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVQbGF5IHtcbiAgY29uc3RydWN0b3IoYm9hcmRTaXplKSB7XG4gICAgdGhpcy5ib2FyZFNpemUgPSBib2FyZFNpemU7XG4gICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMuYm9hcmRFbCA9IG51bGw7XG4gICAgdGhpcy5jZWxscyA9IFtdO1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNlbGxMZWF2ZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuaXNNb2RhbCA9IGZhbHNlO1xuXG4gICAgdGhpcy5pbml0TW9kYWxMaXN0ZW5lcigpO1xuICB9XG5cbiAgYmluZFRvRE9NKGNvbnRhaW5lcikge1xuICAgIGlmICghKGNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWluZXIgaXMgbm90IEhUTUxFbGVtZW50Jyk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICB9XG5cbiAgaW5pdE1vZGFsTGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmhhbmRsZXIgPT09ICdtb2RhbEhhbmRsZXJDYW5jZWwnXG4gICAgICAgICYmIHRoaXMuY3VycmVudE1vZGFsXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kYWwuaGlkZSgpO1xuICAgICAgICB0aGlzLmlzTW9kYWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRyYXdVaSh0aGVtZSkge1xuICAgIHRoaXMuY2hlY2tCaW5kaW5nKCk7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwiYm9hcmQtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgZGF0YS1pZD1cImJvYXJkXCIgY2xhc3M9XCJib2FyZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcblxuICAgIHRoaXMuYm9hcmRFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWJvYXJkXScpO1xuXG4gICAgdGhpcy5ib2FyZEVsLmNsYXNzTGlzdC5hZGQodGhlbWUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZFNpemUgKiogMjsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAnY2VsbCcsXG4gICAgICAgICdtYXAtdGlsZScsXG4gICAgICAgIGBtYXAtdGlsZS0ke2NhbGNUaWxlVHlwZShpLCB0aGlzLmJvYXJkU2l6ZSl9YCxcbiAgICAgICk7XG4gICAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIChldmVudCkgPT4gdGhpcy5vbkNlbGxFbnRlcihldmVudCkpO1xuICAgICAgY2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZXZlbnQpID0+IHRoaXMub25DZWxsTGVhdmUoZXZlbnQpKTtcbiAgICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbkNlbGxDbGljayhldmVudCkpO1xuICAgICAgdGhpcy5ib2FyZEVsLmFwcGVuZENoaWxkKGNlbGxFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5jZWxscyA9IEFycmF5LmZyb20odGhpcy5ib2FyZEVsLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHJlZHJhd1Bvc2l0aW9ucyhwb3NpdGlvbikge1xuICAgIGZvciAoY29uc3QgY2VsbCBvZiB0aGlzLmNlbGxzKSB7XG4gICAgICBjZWxsLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIGNvbnN0IGNlbGxFbCA9IHRoaXMuYm9hcmRFbC5jaGlsZHJlbltwb3NpdGlvbl07XG4gICAgY29uc3QgY2hhckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY2hhckVsLmNsYXNzTGlzdC5hZGQoJ2NoYXJhY3RlcicsICdnZW5lcmljJyk7XG5cbiAgICBjZWxsRWwuYXBwZW5kQ2hpbGQoY2hhckVsKTtcbiAgfVxuXG4gIGFkZENlbGxFbnRlckxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBhZGRDZWxsTGVhdmVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuY2VsbExlYXZlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgYWRkQ2VsbENsaWNrTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uQ2VsbEVudGVyKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICB0aGlzLmNlbGxFbnRlckxpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCwgaW5kZXgpKTtcbiAgfVxuXG4gIG9uQ2VsbExlYXZlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICB0aGlzLmNlbGxMZWF2ZUxpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCwgaW5kZXgpKTtcbiAgfVxuXG4gIG9uQ2VsbENsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgdGhpcy5jZWxsQ2xpY2tMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XG4gIH1cblxuICBzZWxlY3RDZWxsKGluZGV4LCBjb2xvciA9ICd5ZWxsb3cnKSB7XG4gICAgdGhpcy5kZXNlbGVjdENlbGwoaW5kZXgpO1xuICAgIHRoaXMuY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgYHNlbGVjdGVkLSR7Y29sb3J9YCk7XG4gIH1cblxuICBkZXNlbGVjdENlbGwoaW5kZXgpIHtcbiAgICBjb25zdCBjZWxsID0gdGhpcy5jZWxsc1tpbmRleF07XG4gICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgLi4uQXJyYXkuZnJvbShjZWxsLmNsYXNzTGlzdCkuZmlsdGVyKChvKSA9PiBvLnN0YXJ0c1dpdGgoJ3NlbGVjdGVkJykpLFxuICAgICk7XG4gIH1cblxuICBoaWRlQ2VsbFRvb2x0aXAoaW5kZXgpIHtcbiAgICB0aGlzLmNlbGxzW2luZGV4XS50aXRsZSA9ICcnO1xuICB9XG5cbiAgc2V0Q3Vyc29yKGN1cnNvcikge1xuICAgIHRoaXMuYm9hcmRFbC5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XG4gIH1cblxuICBjaGVja0JpbmRpbmcoKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dhbWVQbGF5IG5vdCBiaW5kIHRvIERPTScpO1xuICAgIH1cbiAgfVxuXG4gIHNob3dNb2RhbE1lc3NhZ2UobWVzc2FnZSwgdW5pY29kZSkge1xuICAgIGlmICghdGhpcy5pc01vZGFsKSB7XG4gICAgICB0aGlzLmlzTW9kYWwgPSB0cnVlO1xuICAgICAgdGhpcy5zaG93TW9kYWwobWVzc2FnZSwgdW5pY29kZSk7XG4gICAgfVxuICB9XG5cbiAgc2hvd01vZGFsKG1lc3NhZ2UsIHVuaWNvZGUpIHtcbiAgICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbCh7XG4gICAgICB0aXRsZTogbWVzc2FnZSxcbiAgICAgIGNvbnRlbnQ6IGAmIyR7dW5pY29kZX1gLFxuICAgICAgZm9vdGVyQnV0dG9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgY2xhc3M6ICdidG4gYnRuX19jYW5jZWwnLFxuICAgICAgICAgIHRleHQ6ICdDbG9zZScsXG4gICAgICAgICAgaGFuZGxlcjogJ21vZGFsSGFuZGxlckNhbmNlbCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jdXJyZW50TW9kYWwgPSBtb2RhbDtcblxuICAgIG1vZGFsLnNob3coKTtcbiAgfVxufVxuIiwiaW1wb3J0IGNyZWF0ZVBvc2l0aW9uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVBvc2l0aW9uJztcbmltcG9ydCBjdXJzb3JzIGZyb20gJy4uLy4uL2N1cnNvcnMnO1xuaW1wb3J0IENsaWNrQ291bnRlciBmcm9tICcuLi9DbGlja0NvdW50ZXIvQ2xpY2tDb3VudGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihnYW1lUGxheSkge1xuICAgIHRoaXMuZ2FtZVBsYXkgPSBnYW1lUGxheTtcbiAgICB0aGlzLmluZGV4U2VsZWN0ID0gbnVsbDtcbiAgICB0aGlzLmNsaWNrQ291bnRlciA9IG51bGw7XG4gICAgdGhpcy5vbkNlbGxDbGljayA9IHRoaXMub25DZWxsQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2VsbEVudGVyID0gdGhpcy5vbkNlbGxFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DZWxsTGVhdmUgPSB0aGlzLm9uQ2VsbExlYXZlLmJpbmQodGhpcyk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuZXZlbnRzKCk7XG4gICAgdGhpcy5nYW1lUGxheS5kcmF3VWkoJ3ByYWlyaWUnKTtcbiAgICB0aGlzLmNsaWNrQ291bnRlciA9IG5ldyBDbGlja0NvdW50ZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhbWUtY29udGFpbmVyJykpO1xuICAgIHRoaXMuc2hvd0NoYXJhY3RlcigpO1xuICB9XG5cbiAgZXZlbnRzKCkge1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkQ2VsbEVudGVyTGlzdGVuZXIodGhpcy5vbkNlbGxFbnRlcik7XG4gICAgdGhpcy5nYW1lUGxheS5hZGRDZWxsTGVhdmVMaXN0ZW5lcih0aGlzLm9uQ2VsbExlYXZlKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZENlbGxDbGlja0xpc3RlbmVyKHRoaXMub25DZWxsQ2xpY2spO1xuICB9XG5cbiAgb25DZWxsQ2xpY2soZSkge1xuICAgIHRoaXMucmVhY3RPbkNsaWNrKGUpO1xuICB9XG5cbiAgb25DZWxsRW50ZXIoaW5kZXgpIHtcbiAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmhhbW1lcik7XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLWdlbmVyaWMnKSkge1xuICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5pbmRleFNlbGVjdCk7XG4gICAgfVxuXG4gICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKGluZGV4KTtcbiAgICB0aGlzLmluZGV4U2VsZWN0ID0gaW5kZXg7XG4gIH1cblxuICBvbkNlbGxMZWF2ZShpbmRleCkge1xuICAgIHRoaXMuZ2FtZVBsYXkuaGlkZUNlbGxUb29sdGlwKGluZGV4KTtcbiAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLnBvaW50ZXIpO1xuICB9XG5cbiAgc2hvd0NoYXJhY3RlcigpIHtcbiAgICB0aGlzLnRpbWVySWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGNyZWF0ZVBvc2l0aW9uKHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplKTtcbiAgICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHBvc2l0aW9uKTtcbiAgICB9LCAxMDAwKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZXNldFRpbWVyKCksIDUwMDAwMCk7XG4gIH1cblxuICByZXNldFRpbWVyKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcklkKTtcbiAgfVxuXG4gIHJlYWN0T25DbGljayhlKSB7XG4gICAgY29uc3QgYm9hcmRDZWxsQ2xpY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2VsbCcpW2VdO1xuICAgIGNvbnN0IGlzR29ibGluID0gYm9hcmRDZWxsQ2xpY2sucXVlcnlTZWxlY3RvcignLmdlbmVyaWMnKTtcblxuICAgIGlmIChpc0dvYmxpbikge1xuICAgICAgdGhpcy5jbGlja0NvdW50ZXIuaW5jcmVtZW50SGl0KCk7XG5cbiAgICAgIGlmICh0aGlzLmNsaWNrQ291bnRlci5nZXRIaXRDb3VudCgpID49IDEwKSB7XG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuc2hvd01vZGFsTWVzc2FnZShgWW91IHdpbiEgWW91ciBwb2ludHMgYXJlICR7dGhpcy5jbGlja0NvdW50ZXIuZ2V0SGl0Q291bnQoKX1gLCAnMTI3ODgxJyk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGlja0NvdW50ZXIuaW5jcmVtZW50TWlzcygpO1xuICAgICAgaWYgKHRoaXMuY2xpY2tDb3VudGVyLmdldE1pc3NDb3VudCgpID49IDUpIHtcbiAgICAgICAgdGhpcy5nYW1lUGxheS5zaG93TW9kYWxNZXNzYWdlKCdZb3UgbG9zZSEnLCAnMTI5MzM1Jyk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLmNsaWNrQ291bnRlci5yZXNldCgpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhbGNUaWxlVHlwZSIsImluZGV4IiwiYm9hcmRTaXplIiwiaXNUb3BSb3ciLCJpc0JvdHRvbVJvdyIsImlzTGVmdENvbHVtbiIsImlzUmlnaHRDb2x1bW4iLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiTW9kYWwiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJlbGVtTW9kYWwiLCJldmVudFNob3dNb2RhbCIsImV2ZW50SGlkZU1vZGFsIiwiaGlkaW5nIiwiZGVzdHJveWVkIiwiYW5pbWF0aW9uU3BlZWQiLCJjcmVhdGVNb2RhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyQ2xvc2VNb2RhbCIsImJpbmQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImNyZWF0ZUVsZW1lbnQiLCJtb2RhbEhUTUwiLCJtb2RhbEZvb3RlckhUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0aXRsZSIsImNvbnRlbnQiLCJmb290ZXJCdXR0b25zIiwiYnV0dG9uIiwibW9kYWxGb290ZXJCdXR0b24iLCJjbGFzcyIsImhhbmRsZXIiLCJ0ZXh0IiwiaW5uZXJIVE1MIiwiYm9keSIsImFwcGVuZENoaWxkIiwic2hvdyIsImRpc3BhdGNoRXZlbnQiLCJoaWRlIiwicmVtb3ZlIiwic2V0VGltZW91dCIsInRhcmdldCIsImRhdGFzZXQiLCJkaXNtaXNzIiwiZGVzdHJveSIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRDb250ZW50IiwiaHRtbCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRUaXRsZSIsImxhc3RQb3NpdGlvbiIsImNyZWF0ZVBvc2l0aW9uIiwiY2VsbHMiLCJ0b3RhbENlbGxzIiwiQXJyYXkiLCJmcm9tIiwiXyIsImkiLCJmbGF0TWFwIiwiY2VsbCIsImNyZWF0ZUFycmF5UG9zaXRpb25zIiwicmFuZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBvaW50ZXIiLCJub3RhbGxvd2VkIiwiaGFtbWVyIiwiQ2xpY2tDb3VudGVyIiwiY29udGFpbmVyIiwiaGl0Q291bnQiLCJtaXNzQ291bnQiLCJpbml0VUkiLCJIVE1MRWxlbWVudCIsImluc2VydEFkamFjZW50SFRNTCIsImdldEhpdENvdW50IiwiZ2V0TWlzc0NvdW50IiwiaGl0Q291bnRFbCIsIm1pc3NDb3VudEVsIiwiaW5jcmVtZW50SGl0IiwidXBkYXRlVUkiLCJpbmNyZW1lbnRNaXNzIiwidGV4dENvbnRlbnQiLCJyZXNldCIsImNvbnNvbGUiLCJsb2ciLCJnYW1lUGxheSIsImJvYXJkRWwiLCJjZWxsQ2xpY2tMaXN0ZW5lcnMiLCJjZWxsRW50ZXJMaXN0ZW5lcnMiLCJjZWxsTGVhdmVMaXN0ZW5lcnMiLCJpc01vZGFsIiwiaW5pdE1vZGFsTGlzdGVuZXIiLCJiaW5kVG9ET00iLCJjdXJyZW50TW9kYWwiLCJkcmF3VWkiLCJ0aGVtZSIsImNoZWNrQmluZGluZyIsImNlbGxFbCIsImV2ZW50Iiwib25DZWxsRW50ZXIiLCJvbkNlbGxMZWF2ZSIsIm9uQ2VsbENsaWNrIiwiY2hpbGRyZW4iLCJyZWRyYXdQb3NpdGlvbnMiLCJwb3NpdGlvbiIsImNoYXJFbCIsImFkZENlbGxFbnRlckxpc3RlbmVyIiwiY2FsbGJhY2siLCJwdXNoIiwiYWRkQ2VsbExlYXZlTGlzdGVuZXIiLCJhZGRDZWxsQ2xpY2tMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwiaW5kZXhPZiIsImN1cnJlbnRUYXJnZXQiLCJmb3JFYWNoIiwibyIsImNhbGwiLCJzZWxlY3RDZWxsIiwiY29sb3IiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJkZXNlbGVjdENlbGwiLCJmaWx0ZXIiLCJzdGFydHNXaXRoIiwiaGlkZUNlbGxUb29sdGlwIiwic2V0Q3Vyc29yIiwiY3Vyc29yIiwic3R5bGUiLCJzaG93TW9kYWxNZXNzYWdlIiwibWVzc2FnZSIsInVuaWNvZGUiLCJzaG93TW9kYWwiLCJtb2RhbCIsImdhbWVDdHJsIiwiaW5kZXhTZWxlY3QiLCJjbGlja0NvdW50ZXIiLCJpbml0IiwiZXZlbnRzIiwic2hvd0NoYXJhY3RlciIsInJlYWN0T25DbGljayIsImN1cnNvcnMiLCJ0aW1lcklkIiwic2V0SW50ZXJ2YWwiLCJyZXNldFRpbWVyIiwiY2xlYXJJbnRlcnZhbCIsInF1ZXJ5U2VsZWN0b3JBbGwiXSwic291cmNlUm9vdCI6IiJ9